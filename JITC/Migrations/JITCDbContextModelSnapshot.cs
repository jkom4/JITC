// <auto-generated />
using System;
using JITC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JITC.Migrations
{
    [DbContext(typeof(JITCDbContext))]
    partial class JITCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JITC.Models.Aeroport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Aeroport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 50.63583079,
                            Longitude = 5.4393315759999998,
                            Nom = "Liège"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 50.900829729999998,
                            Longitude = 4.4839980639999997,
                            Nom = "Bruxelles"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 51.193165894000003,
                            Longitude = 2.8581632340000001,
                            Nom = "Oostende"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 50.455998176000001,
                            Longitude = 4.4516648600000002,
                            Nom = "Charleroi"
                        });
                });

            modelBuilder.Entity("JITC.Models.Appareil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacite_Cab")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Moteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.Property<float>("Vitesse")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Appareil");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacite_Cab = 5,
                            Description = "",
                            Moteur = "Deux turbines du modèle de Rolls Royce 250-C20F",
                            Nom = "Eurocopter AS 355 F1/F2 Ecureuil III",
                            Statut = false,
                            Vitesse = 220f
                        },
                        new
                        {
                            Id = 2,
                            Capacite_Cab = 4,
                            Description = "",
                            Moteur = "Une turbine du type Rolls Royce 250-C20B",
                            Nom = "Bell 206 JetRanger",
                            Statut = false,
                            Vitesse = 190f
                        },
                        new
                        {
                            Id = 3,
                            Capacite_Cab = 3,
                            Description = "",
                            Moteur = "Un piston du type Lycoming modèle IO-540",
                            Nom = "Robinson R44 Raven II",
                            Statut = false,
                            Vitesse = 190f
                        });
                });

            modelBuilder.Entity("JITC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bfd621df-08a9-4e32-9976-bb31b6350660",
                            Email = "M.Ney@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Mo",
                            LockoutEnabled = false,
                            Name = "Ney",
                            NormalizedEmail = "M.NEY@JITC.COM",
                            NormalizedUserName = "MONEY",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4dPiUnzaW2a3ANPnkmJFPZ+XeXjD3DWjVxMcsvG3O7/kA3V0yYvJKlyrthCXMKsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38e6b073-be5f-4bff-b564-6efc68a722bd",
                            TwoFactorEnabled = false,
                            UserName = "MoNey"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7391aa83-072d-40ac-bf6e-aebedc52eb27",
                            Email = "D.Balav@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Daniele",
                            LockoutEnabled = false,
                            Name = "Balav",
                            NormalizedEmail = "D.BALAV@JITC.COM",
                            NormalizedUserName = "DANIELEBALAV",
                            PasswordHash = "AQAAAAEAACcQAAAAELgvc7vEdEI8oRXc0iPXD7jpXrIZw2/k1cILLPyWWZYkR8DtGJCNhxwuCrX3K1b+Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a863584-3d98-43c3-9746-367c8d90b5fd",
                            TwoFactorEnabled = false,
                            UserName = "DanieleBalav"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "237241f0-989b-46ae-9f58-ec3225cf021a",
                            Email = "T.Sabine@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Thierry",
                            LockoutEnabled = false,
                            Name = "Sabine",
                            NormalizedEmail = "T.SABINE@JITC.COM",
                            NormalizedUserName = "THIERRYSABINE",
                            PasswordHash = "AQAAAAEAACcQAAAAEM7m5qZCPNA9ADmMUReIsnx1zDLNXz+EMOe/ljSEMUJz0VO9gH3tzZA230/gu+oWHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ce9ce10-e137-41fa-b623-b1dd0dd6f94b",
                            TwoFactorEnabled = false,
                            UserName = "ThierrySabine"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4f555741-7712-4a3c-af5d-ba7ebaf86f6f",
                            Email = "E.Coptere@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Eli",
                            LockoutEnabled = false,
                            Name = "Copetre",
                            NormalizedEmail = "E.COPTERE@JITC.COM",
                            NormalizedUserName = "ELICOPTERE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBEVLbjM/iWfIb/JbFIY7T6Y1lrttIvzthP6hN5TeRq2gHRkG68SLf2veFW8J5BdgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "677be91e-3d05-4751-88f7-f7d6a7476f51",
                            TwoFactorEnabled = false,
                            UserName = "EliCoptere"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "05882b94-95a7-4f8c-9502-878a2e414a30",
                            Email = "JobKom@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Job",
                            LockoutEnabled = false,
                            Name = "Kom",
                            NormalizedEmail = "JOBKOM@JITC.COM",
                            NormalizedUserName = "JOBKOM",
                            PasswordHash = "AQAAAAEAACcQAAAAENrMnuMV/x81KdY95D6DSfFtCg03hDd7cMYpAnpvuT5Qr9UVcwWIBFKeIhq6Ds7pLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d647222-14ff-48c1-896e-f988da79cd7a",
                            TwoFactorEnabled = false,
                            UserName = "JobKom"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5501706c-0e77-4bb0-8f92-4e316d045dcf",
                            Email = "BlaisePascal@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Blaise",
                            LockoutEnabled = false,
                            Name = "Pascal",
                            NormalizedEmail = "BLAISEPASCAL@JITC.COM",
                            NormalizedUserName = "BLAISEPASCAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGy6wuL7IIZgPvwc8I7eC3Uq0E/0VX1fX1AenjcUmqImnwAq09NSVfjo+t2KbYhSgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42fc187a-f115-412f-9611-2026f90c5cd3",
                            TwoFactorEnabled = false,
                            UserName = "BlaisePascal"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6c2733c4-5725-4619-8f08-0a6ee81d099c",
                            Email = "JeanPierre@jitc.com",
                            EmailConfirmed = false,
                            Firstname = "Jean",
                            LockoutEnabled = false,
                            Name = "Pierre",
                            NormalizedEmail = "JEANPIERRE@JITC.COM",
                            NormalizedUserName = "JEANPIERRE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOC0MpFsTXrb/e91ENq6FCNyVEKQizTpRo8jDB/kT33LlXE/vJ0C7H9Hs1wJxuVRhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43ef880b-b9cf-401e-a3a3-956771aa792e",
                            TwoFactorEnabled = false,
                            UserName = "JeanPierre"
                        });
                });

            modelBuilder.Entity("JITC.Models.ModifVol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("VolModifs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModifVol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VolModifs = "[\"{\\\"IdVol\\\":1,\\\"Vol\\\":\\\"Liège - Bruxelles\\\",\\\"Depart\\\":{\\\"Id\\\":1,\\\"Nom\\\":\\\"Liège\\\",\\\"Latitude\\\":50.63583079,\\\"Longitude\\\":5.439331576},\\\"Arrive\\\":{\\\"Id\\\":2,\\\"Nom\\\":\\\"Bruxelles\\\",\\\"Latitude\\\":50.90082973,\\\"Longitude\\\":4.483998064},\\\"DepartPrevue\\\":\\\"2022-08-01T08:02:00\\\",\\\"ArrivePrevue\\\":\\\"2022-08-01T10:02:00\\\",\\\"DepartReelle\\\":null,\\\"ArriveReelle\\\":null,\\\"NombrePlace\\\":10,\\\"NombrePlaceDispo\\\":0,\\\"Pilote\\\":null,\\\"Appareil\\\":{\\\"Id\\\":1,\\\"Nom\\\":\\\"Eurocopter AS 355 F1/F2 Ecureuil III\\\",\\\"Description\\\":\\\"\\\",\\\"Capacite_Cab\\\":5,\\\"Vitesse\\\":220.0,\\\"Moteur\\\":\\\"Deux turbines du modèle de Rolls Royce 250-C20F\\\",\\\"Statut\\\":false,\\\"Vols\\\":[]},\\\"Recurrence\\\":null,\\\"Reservation\\\":null,\\\"Reservations\\\":null,\\\"vols\\\":null}\"]"
                        },
                        new
                        {
                            Id = 2,
                            VolModifs = "[\"{\\\"IdVol\\\":2,\\\"Vol\\\":\\\"Bruxelles - Liège\\\",\\\"Depart\\\":{\\\"Id\\\":2,\\\"Nom\\\":\\\"Bruxelles\\\",\\\"Latitude\\\":50.90082973,\\\"Longitude\\\":4.483998064},\\\"Arrive\\\":{\\\"Id\\\":1,\\\"Nom\\\":\\\"Liège\\\",\\\"Latitude\\\":50.63583079,\\\"Longitude\\\":5.439331576},\\\"DepartPrevue\\\":\\\"2022-08-07T08:02:00\\\",\\\"ArrivePrevue\\\":\\\"2022-08-07T10:02:00\\\",\\\"DepartReelle\\\":null,\\\"ArriveReelle\\\":null,\\\"NombrePlace\\\":10,\\\"NombrePlaceDispo\\\":0,\\\"Pilote\\\":null,\\\"Appareil\\\":{\\\"Id\\\":1,\\\"Nom\\\":\\\"Eurocopter AS 355 F1/F2 Ecureuil III\\\",\\\"Description\\\":\\\"\\\",\\\"Capacite_Cab\\\":5,\\\"Vitesse\\\":220.0,\\\"Moteur\\\":\\\"Deux turbines du modèle de Rolls Royce 250-C20F\\\",\\\"Statut\\\":false,\\\"Vols\\\":[]},\\\"Recurrence\\\":null,\\\"Reservation\\\":null,\\\"Reservations\\\":null,\\\"vols\\\":null}\"]"
                        },
                        new
                        {
                            Id = 3,
                            VolModifs = "[\"{\\\"IdVol\\\":3,\\\"Vol\\\":\\\"Liège - Oostende\\\",\\\"Depart\\\":{\\\"Id\\\":1,\\\"Nom\\\":\\\"Liège\\\",\\\"Latitude\\\":50.63583079,\\\"Longitude\\\":5.439331576},\\\"Arrive\\\":{\\\"Id\\\":3,\\\"Nom\\\":\\\"Oostende\\\",\\\"Latitude\\\":51.193165894,\\\"Longitude\\\":2.858163234},\\\"DepartPrevue\\\":\\\"2022-08-15T08:02:00\\\",\\\"ArrivePrevue\\\":\\\"2022-08-15T11:02:00\\\",\\\"DepartReelle\\\":null,\\\"ArriveReelle\\\":null,\\\"NombrePlace\\\":5,\\\"NombrePlaceDispo\\\":0,\\\"Pilote\\\":null,\\\"Appareil\\\":{\\\"Id\\\":2,\\\"Nom\\\":\\\"Bell 206 JetRanger\\\",\\\"Description\\\":\\\"\\\",\\\"Capacite_Cab\\\":4,\\\"Vitesse\\\":190.0,\\\"Moteur\\\":\\\"Une turbine du type Rolls Royce 250-C20B\\\",\\\"Statut\\\":false,\\\"Vols\\\":[]},\\\"Recurrence\\\":null,\\\"Reservation\\\":null,\\\"Reservations\\\":null,\\\"vols\\\":null}\"]"
                        },
                        new
                        {
                            Id = 4,
                            VolModifs = "[\"{\\\"IdVol\\\":4,\\\"Vol\\\":\\\"Bruxelles - Charleroi\\\",\\\"Depart\\\":{\\\"Id\\\":2,\\\"Nom\\\":\\\"Bruxelles\\\",\\\"Latitude\\\":50.90082973,\\\"Longitude\\\":4.483998064},\\\"Arrive\\\":{\\\"Id\\\":4,\\\"Nom\\\":\\\"Charleroi\\\",\\\"Latitude\\\":50.455998176,\\\"Longitude\\\":4.45166486},\\\"DepartPrevue\\\":\\\"2022-08-16T08:02:00\\\",\\\"ArrivePrevue\\\":\\\"2022-08-16T10:02:00\\\",\\\"DepartReelle\\\":null,\\\"ArriveReelle\\\":null,\\\"NombrePlace\\\":15,\\\"NombrePlaceDispo\\\":0,\\\"Pilote\\\":null,\\\"Appareil\\\":{\\\"Id\\\":3,\\\"Nom\\\":\\\"Robinson R44 Raven II\\\",\\\"Description\\\":\\\"\\\",\\\"Capacite_Cab\\\":3,\\\"Vitesse\\\":190.0,\\\"Moteur\\\":\\\"Un piston du type Lycoming modèle IO-540\\\",\\\"Statut\\\":false,\\\"Vols\\\":[]},\\\"Recurrence\\\":null,\\\"Reservation\\\":null,\\\"Reservations\\\":null,\\\"vols\\\":null}\"]"
                        },
                        new
                        {
                            Id = 5,
                            VolModifs = "[\"{\\\"IdVol\\\":5,\\\"Vol\\\":\\\"Charleroi - Bruxelles\\\",\\\"Depart\\\":{\\\"Id\\\":4,\\\"Nom\\\":\\\"Charleroi\\\",\\\"Latitude\\\":50.455998176,\\\"Longitude\\\":4.45166486},\\\"Arrive\\\":{\\\"Id\\\":2,\\\"Nom\\\":\\\"Bruxelles\\\",\\\"Latitude\\\":50.90082973,\\\"Longitude\\\":4.483998064},\\\"DepartPrevue\\\":\\\"2022-08-17T08:02:00\\\",\\\"ArrivePrevue\\\":\\\"2022-08-17T10:02:00\\\",\\\"DepartReelle\\\":null,\\\"ArriveReelle\\\":null,\\\"NombrePlace\\\":6,\\\"NombrePlaceDispo\\\":0,\\\"Pilote\\\":null,\\\"Appareil\\\":{\\\"Id\\\":3,\\\"Nom\\\":\\\"Robinson R44 Raven II\\\",\\\"Description\\\":\\\"\\\",\\\"Capacite_Cab\\\":3,\\\"Vitesse\\\":190.0,\\\"Moteur\\\":\\\"Un piston du type Lycoming modèle IO-540\\\",\\\"Statut\\\":false,\\\"Vols\\\":[]},\\\"Recurrence\\\":null,\\\"Reservation\\\":null,\\\"Reservations\\\":null,\\\"vols\\\":null}\"]"
                        });
                });

            modelBuilder.Entity("JITC.Models.Reservation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("place")
                        .HasColumnType("int");

                    b.Property<int?>("volId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("volId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "5",
                            place = 5,
                            volId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = "6",
                            place = 10,
                            volId = 2
                        },
                        new
                        {
                            Id = 3,
                            UserId = "5",
                            place = 5,
                            volId = 3
                        },
                        new
                        {
                            Id = 4,
                            UserId = "7",
                            place = 10,
                            volId = 4
                        },
                        new
                        {
                            Id = 5,
                            UserId = "6",
                            place = 5,
                            volId = 5
                        });
                });

            modelBuilder.Entity("JITC.Models.Vol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AeroportArriveId")
                        .HasColumnType("int");

                    b.Property<int?>("AeroportDepartId")
                        .HasColumnType("int");

                    b.Property<int>("AppareilId")
                        .HasColumnType("int");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<DateTime>("HeureArrivePrevue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureArriveReelle")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureDepartPrevue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureDepartReelle")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ModifDate")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifVolId")
                        .HasColumnType("int");

                    b.Property<int>("NombrePlace")
                        .HasColumnType("int");

                    b.Property<string>("PiloteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Raison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recurrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Retard")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AeroportArriveId");

                    b.HasIndex("AeroportDepartId");

                    b.HasIndex("AppareilId");

                    b.HasIndex("ModifVolId");

                    b.HasIndex("PiloteId");

                    b.ToTable("Vol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AeroportArriveId = 2,
                            AeroportDepartId = 1,
                            AppareilId = 1,
                            Distance = 29.515449800117239,
                            HeureArrivePrevue = new DateTime(2022, 8, 1, 10, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureArriveReelle = new DateTime(2022, 8, 1, 11, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartPrevue = new DateTime(2022, 8, 1, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartReelle = new DateTime(2022, 8, 1, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            ModifDate = true,
                            ModifVolId = 1,
                            NombrePlace = 10,
                            PiloteId = "2",
                            Raison = "Mauvais temps",
                            Retard = true
                        },
                        new
                        {
                            Id = 2,
                            AeroportArriveId = 1,
                            AeroportDepartId = 2,
                            AppareilId = 1,
                            Distance = 29.515449800117239,
                            HeureArrivePrevue = new DateTime(2022, 8, 7, 10, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureArriveReelle = new DateTime(2022, 8, 1, 10, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartPrevue = new DateTime(2022, 8, 7, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartReelle = new DateTime(2022, 8, 1, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            ModifDate = true,
                            ModifVolId = 2,
                            NombrePlace = 10,
                            PiloteId = "2",
                            Retard = false
                        },
                        new
                        {
                            Id = 3,
                            AeroportArriveId = 3,
                            AeroportDepartId = 1,
                            AppareilId = 2,
                            Distance = 49.515449800117239,
                            HeureArrivePrevue = new DateTime(2022, 8, 15, 11, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartPrevue = new DateTime(2022, 8, 15, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            ModifDate = true,
                            ModifVolId = 3,
                            NombrePlace = 5,
                            PiloteId = "3",
                            Retard = false
                        },
                        new
                        {
                            Id = 4,
                            AeroportArriveId = 4,
                            AeroportDepartId = 2,
                            AppareilId = 3,
                            Distance = 49.515449800117239,
                            HeureArrivePrevue = new DateTime(2022, 8, 16, 10, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartPrevue = new DateTime(2022, 8, 16, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            ModifDate = true,
                            ModifVolId = 4,
                            NombrePlace = 15,
                            PiloteId = "4",
                            Retard = false
                        },
                        new
                        {
                            Id = 5,
                            AeroportArriveId = 2,
                            AeroportDepartId = 4,
                            AppareilId = 3,
                            Distance = 59.515449800117239,
                            HeureArrivePrevue = new DateTime(2022, 8, 17, 10, 2, 0, 0, DateTimeKind.Unspecified),
                            HeureDepartPrevue = new DateTime(2022, 8, 17, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            ModifDate = true,
                            ModifVolId = 5,
                            NombrePlace = 6,
                            PiloteId = "3",
                            Retard = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "ec0598de-8669-42dd-8202-8398fa97b205",
                            Name = "Responsable",
                            NormalizedName = "RESPONSABLE"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "0404bb6d-96de-4681-82b3-bcb5733c0adf",
                            Name = "Pilote",
                            NormalizedName = "PILOTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JITC.Models.Reservation", b =>
                {
                    b.HasOne("JITC.Models.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");

                    b.HasOne("JITC.Models.Vol", "vol")
                        .WithMany("Reservations")
                        .HasForeignKey("volId");

                    b.Navigation("User");

                    b.Navigation("vol");
                });

            modelBuilder.Entity("JITC.Models.Vol", b =>
                {
                    b.HasOne("JITC.Models.Aeroport", "AeroportArrive")
                        .WithMany()
                        .HasForeignKey("AeroportArriveId");

                    b.HasOne("JITC.Models.Aeroport", "AeroportDepart")
                        .WithMany()
                        .HasForeignKey("AeroportDepartId");

                    b.HasOne("JITC.Models.Appareil", "Appareil")
                        .WithMany("Vols")
                        .HasForeignKey("AppareilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JITC.Models.ModifVol", "ModifVol")
                        .WithMany("Vols")
                        .HasForeignKey("ModifVolId");

                    b.HasOne("JITC.Models.ApplicationUser", "Pilote")
                        .WithMany("Vols")
                        .HasForeignKey("PiloteId");

                    b.Navigation("AeroportArrive");

                    b.Navigation("AeroportDepart");

                    b.Navigation("Appareil");

                    b.Navigation("ModifVol");

                    b.Navigation("Pilote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JITC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JITC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JITC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JITC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JITC.Models.Appareil", b =>
                {
                    b.Navigation("Vols");
                });

            modelBuilder.Entity("JITC.Models.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Vols");
                });

            modelBuilder.Entity("JITC.Models.ModifVol", b =>
                {
                    b.Navigation("Vols");
                });

            modelBuilder.Entity("JITC.Models.Vol", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
